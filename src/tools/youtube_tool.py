from crewai.tools import BaseTool
from pydantic import BaseModel, Field, ConfigDict
from typing import List, Optional
from apify import Actor
from src.tools.base import RunApifyActor

class YouTubeScraperInput(BaseModel):
    """Input schema for YouTubeScraper tool."""
    searchQueries: Optional[List[str]] = Field(
        description="Search terms just like you would enter in YouTube's search bar"
    )
    
    
    maxResultsShorts: Optional[int] = Field(
        default=0,
        description="Limit the number of Shorts videos to crawl"
    )
    
    maxResultStreams: Optional[int] = Field(
        default=0,
        description="Limit the number of Stream videos to crawl"
    )
    
    startUrls: Optional[List[str]] = Field(
        default=[],
        description="Direct URLs to YouTube videos, channels, playlists, hashtags or search results"
    )
    
    downloadSubtitles: Optional[bool] = Field(
        default=False,
        description="Download subtitles for videos in .srt format"
    )
    
    saveSubsToKVS: Optional[bool] = Field(
        default=False,
        description="Save downloaded subtitles to key-value store"
    )
    
    subtitlesLanguage: Optional[str] = Field(
        default="any",
        description="Language for subtitles download"
    )
    
    preferAutoGeneratedSubtitles: Optional[bool] = Field(
        default=False,
        description="Prefer auto-generated subtitles over user subtitles"
    )
    
    subtitlesFormat: Optional[str] = Field(
        default="srt",
        description="Format for subtitle downloads"
    )
    
    sortingOrder: Optional[str] = Field(
        description="YouTube sorting parameter for search",
        default=None
    )
    
    dateFilter: Optional[str] = Field(
        description="YouTube upload date filter for search",
        default=None
    )
    
    videoType: Optional[str] = Field(
        description="YouTube video type filter",
        default=None
    )
    
    lengthFilter: Optional[str] = Field(
        description="YouTube video length filter",
        default=None
    )
    
    isHD: Optional[bool] = Field(
        description="Apply HD filter for search",
        default=None
    )
    
    hasSubtitles: Optional[bool] = Field(
        description="Apply Subtitles/CC filter",
        default=None
    )
    
    hasCC: Optional[bool] = Field(
        description="Apply Creative Commons filter",
        default=None
    )
    
    is3D: Optional[bool] = Field(
        description="Apply 3D filter",
        default=None
    )
    
    isLive: Optional[bool] = Field(
        description="Apply Live filter",
        default=None
    )
    
    isBought: Optional[bool] = Field(
        description="Apply Purchased filter",
        default=None
    )
    
    is4K: Optional[bool] = Field(
        description="Apply 4K filter",
        default=None
    )
    
    is360: Optional[bool] = Field(
        description="Apply 360 degrees filter",
        default=None
    )
    
    hasLocation: Optional[bool] = Field(
        description="Apply Location filter",
        default=None
    )
    
    isHDR: Optional[bool] = Field(
        description="Apply HDR filter",
        default=None
    )
    
    isVR180: Optional[bool] = Field(
        description="Apply VR180 filter",
        default=None
    )
    
    oldestPostDate: Optional[str] = Field(
        description="Only scrape posts newer than this date (YYYY-MM-DD)",
        default=None
    )
    
    scrapeLastNDays: Optional[int] = Field(
        description="Scrape videos from last N days",
        default=None
    )
    
    sortVideosBy: Optional[str] = Field(
        description="Sort videos by NEWEST, POPULAR, or OLDEST",
        default=None
    )

class YouTubeScraperTool(BaseTool):
    name: str = "YouTube Scraper"
    description: str = "Tool for scraping YouTube videos, channels, playlists with configurable parameters"
    args_schema: type[BaseModel] = YouTubeScraperInput
    actor: Actor = Field(description="Apify Actor instance")
    model_config = ConfigDict(arbitrary_types_allowed=True)

    def _run(
        self,
        searchQueries: Optional[List[str]] = None,
        maxResultsShorts: Optional[int] = 0,
        maxResultStreams: Optional[int] = 0,
        startUrls: Optional[List[str]] = [],
        downloadSubtitles: Optional[bool] = False,
        saveSubsToKVS: Optional[bool] = False,
        subtitlesLanguage: Optional[str] = "any",
        preferAutoGeneratedSubtitles: Optional[bool] = False,
        subtitlesFormat: Optional[str] = "srt",
        sortingOrder: Optional[str] = None,
        dateFilter: Optional[str] = None,
        videoType: Optional[str] = None,
        lengthFilter: Optional[str] = None,
        isHD: Optional[bool] = None,
        hasSubtitles: Optional[bool] = None,
        hasCC: Optional[bool] = None,
        is3D: Optional[bool] = None,
        isLive: Optional[bool] = None,
        isBought: Optional[bool] = None,
        is4K: Optional[bool] = None,
        is360: Optional[bool] = None,
        hasLocation: Optional[bool] = None,
        isHDR: Optional[bool] = None,
        isVR180: Optional[bool] = None,
        oldestPostDate: Optional[str] = None,
        scrapeLastNDays: Optional[int] = None,
        sortVideosBy: Optional[str] = None
    ) -> str:
        run_inputs = {}
        
        if searchQueries:
            run_inputs["searchQueries"] = searchQueries
        run_inputs["maxResults"] = 10
        if maxResultsShorts:
            run_inputs["maxResultsShorts"] = maxResultsShorts
        if maxResultStreams:
            run_inputs["maxResultStreams"] = maxResultStreams
        if startUrls:
            run_inputs["startUrls"] = startUrls
        if downloadSubtitles:
            run_inputs["downloadSubtitles"] = downloadSubtitles
        if saveSubsToKVS:
            run_inputs["saveSubsToKVS"] = saveSubsToKVS
        if subtitlesLanguage:
            run_inputs["subtitlesLanguage"] = subtitlesLanguage
        if preferAutoGeneratedSubtitles:
            run_inputs["preferAutoGeneratedSubtitles"] = preferAutoGeneratedSubtitles
        if subtitlesFormat:
            run_inputs["subtitlesFormat"] = subtitlesFormat
        if sortingOrder:
            run_inputs["sortingOrder"] = sortingOrder
        if dateFilter:
            run_inputs["dateFilter"] = dateFilter
        if videoType:
            run_inputs["videoType"] = videoType
        if lengthFilter:
            run_inputs["lengthFilter"] = lengthFilter
        if isHD is not None:
            run_inputs["isHD"] = isHD
        if hasSubtitles is not None:
            run_inputs["hasSubtitles"] = hasSubtitles
        if hasCC is not None:
            run_inputs["hasCC"] = hasCC
        if is3D is not None:
            run_inputs["is3D"] = is3D
        if isLive is not None:
            run_inputs["isLive"] = isLive
        if isBought is not None:
            run_inputs["isBought"] = isBought
        if is4K is not None:
            run_inputs["is4K"] = is4K
        if is360 is not None:
            run_inputs["is360"] = is360
        if hasLocation is not None:
            run_inputs["hasLocation"] = hasLocation
        if isHDR is not None:
            run_inputs["isHDR"] = isHDR
        if isVR180 is not None:
            run_inputs["isVR180"] = isVR180
        if oldestPostDate:
            run_inputs["oldestPostDate"] = oldestPostDate
        if scrapeLastNDays:
            run_inputs["scrapeLastNDays"] = scrapeLastNDays
        if sortVideosBy:
            run_inputs["sortVideosBy"] = sortVideosBy
            
        run_actor = RunApifyActor(self.actor)
        dataset = run_actor._run("streamers/youtube-scraper", run_inputs)
        return dataset

